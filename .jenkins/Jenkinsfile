#!/usr/bin/groovy

@Library('jenkins-pipeline@v0.4.4')

APPRAISAL_JOB_NAME = '/Elasticsearch Models Gem/Appraisal Test'

def setGithubStatus(String name, String description, String status) {
  gitHubStatus([
    repoSlug:    'Invoca/elasticsearch_models',
    sha:         env.GIT_COMMIT,
    description: description,
    context:     name,
    targetURL:   env.RUN_DISPLAY_URL,
    token:       env.GITHUB_TOKEN,
    status:      status
  ])
}

pipeline {
  agent {
    kubernetes {
      defaultContainer 'ruby'
      yamlFile '.jenkins/ruby_build_pod.yml'
    }
  }

  environment {
    GITHUB_TOKEN         = credentials('github_token')
    BUNDLE_GEM__FURY__IO = credentials('gemfury_deploy_token')
  }

  stages {
    stage("Setup") {
      steps {
        setGithubStatus('clean-build', 'Running unit tests', 'pending')
        sh 'bundle install'
      }
    }

    stage("Tests") {
      parallel {
        stage("Current") {
          environment { ELASTICSEARCH_TEST_PORT = '9200' }
          steps       { sh 'bundle exec rspec' }
          post        { always { junit 'spec/reports/*.xml' } }
        }

        stage("Rails 4 Appraisal") {
          steps {
            build(
              job: APPRAISAL_JOB_NAME,
              parameters: [
                string(name: "APPRAISAL_NAME", value: "rails-4"),
                string(name: "GIT_COMMIT", value: env.GIT_COMMIT)
              ],
              propagate: true
            )
          }
        }

        stage("Rails 5 Appraisal") {
          steps {
            build(
              job: APPRAISAL_JOB_NAME,
              parameters: [
                string(name: "APPRAISAL_NAME", value: "rails-5"),
                string(name: "GIT_COMMIT", value: env.GIT_COMMIT)
              ],
              propagate: true
            )
          }
        }

        stage("Rails 6 Appraisal") {
          steps {
            build(
              job: APPRAISAL_JOB_NAME,
              parameters: [
                string(name: "APPRAISAL_NAME", value: "rails-6"),
                string(name: "GIT_COMMIT", value: env.GIT_COMMIT)
              ],
              propagate: true
            )
          }
        }
      }
    }
  }

  post {
    success { setGithubStatus('clean-build', 'Passed all unit tests!', 'success') }
    failure { setGithubStatus('clean-build', 'Failure during unit tests!', 'failure') }
  }
}
